 function [ numerical_coeff ] = ...
                     numerical_residual_coeff( ...
                            flow_constant, flow_constant_t, ...
                            h_P_t, h_P_t_guess, h_P, h_w, h_e, ...
                            dS_dx_w, dS_dx_e, ...
                            B_P, B_w, B_e, ...
                            W_P, W_w, W_e, x_P, x_w, x_e, ...
                            dx_P, dx_w, dx_e, dt_P, ...
                            b_dot_P, b_dot_edges, b_dot_edges_SS, ...
                            divide_pos_P_SS, divide_pos_real_SS, ...
                            Q_out_L_SS, Q_out_R_SS, ...
                            Q_external_L, Q_external_R, ...
                            Q_out_L, Q_out_R, ...
                            full_domain_flag, residual_0, N_x, ...
                            t_P, i_time )
                      
                
% ------------------------------------------------------------------
% Michelle Koutnik (mkoutnik@ess.washington.edu)
% last updated June 2008


% Detailed comments at the END of this file.

% ------------------------------------------------------------------
                      

global n


                      
% initialize matrix to fill
% =========================
      numerical_coeff = NaN(N_x, N_x);
     
      h_ref = h_P_t_guess;  
     
          
%  Loop on parameters to perturb
%  =============================
    for j_param = 1:N_x
    
      
      h_dim = h_ref;   % restore parameter vector
      
                            
      %delta_p_j = 0.01*h_dim(j_param);   % meters perturbation to the ice thickness
      delta_p_j = 0.01;
      
      h_dim(j_param) = h_dim(j_param) + delta_p_j;    % perturb element "j_param"   
     
              
      h_P_t = h_dim;     
     
     
   % update other values
   % ===================
      [ h_w_t, h_e_t ] = get_edge_values_quadratic( h_P_t, x_P, x_w, x_e, ...
                                                    dx_P, dx_w, dx_e );
                           
      [ dS_dx_w_t, dS_dx_e_t ] = get_gradient_values( h_P_t, x_P, dx_P );
       
      S_P_t = h_P_t + B_P;
      
      
      
     % get the divide position
% =======================
   [ x_divide_pos_t, ...
     x_divide_real_t ] = get_divide_position( x_P, S_P_t );

   
 
 
% calculate Q_out(time)
% =====================
 [ Q_out_L_t, ...
   Q_out_R_t ] =  flux_out_bc ( full_domain_flag, ...
                                   x_divide_pos_t, ...
                                   x_divide_real_t, ...
                                   x_P, x_w, x_e, ...
                                   dx_P, dx_w, dx_e, ...
                                   W_P, W_w, W_e, ...
                                   b_dot_edges_SS, ...
                                   b_dot_edges(2,:),  ...
                                   divide_pos_P_SS, ...
                                   divide_pos_real_SS, ...
                                   Q_out_L_SS, Q_out_R_SS, ...
                                   Q_external_L(2), ...
                                   Q_external_R(2), ...
                                   t_P, dt_P, i_time );                    
                             
% Call solver
% =========== 
   [ h_P_t_guess1, ...
     h_P_t1, ...
     flux_edges_dyn_t, ...
     flux_edges_kin_t, ...
     residual_1 ] = solver( flow_constant, flow_constant_t, ...
                            h_P, h_w, h_e, h_P_t, h_w_t, h_e_t, ...
                            dS_dx_w, dS_dx_e, dS_dx_w_t, dS_dx_e_t, ...
                            B_P, B_w, B_e, W_P, W_w, W_e, ...
                            x_P, x_w, x_e, ...
                            dx_P, dx_w, dx_e, dt_P, ...
                            b_dot_P, b_dot_edges, ...
                            Q_out_L, Q_out_L_t, ...
                            Q_out_R, Q_out_R_t, ...
                            full_domain_flag, N_x );

                              
                               
                     
%  find partial derivatives d r_i / d h_j
%  ======================================
       new_col = (residual_1 - residual_0)' ./ delta_p_j;
       
        numerical_coeff(:,j_param) = new_col; 
     %  numerical_coeff = [ numerical_coeff  new_col ];
                
              
   end     %   for j_param 



      
      
      
      
      
